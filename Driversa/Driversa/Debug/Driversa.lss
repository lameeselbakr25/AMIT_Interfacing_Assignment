
Driversa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000912  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000564  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <writechannel>:
void writechannel(Dio_channelType channelId, STD_LevelType level) {
	
    // port ? 
	uint8 portx=channelId/8;
	
	Dio_channelType pos=channelId % 8;
  6c:	98 2f       	mov	r25, r24
  6e:	97 70       	andi	r25, 0x07	; 7
	switch(portx) {
  70:	86 95       	lsr	r24
  72:	86 95       	lsr	r24
  74:	86 95       	lsr	r24
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	21 f1       	breq	.+72     	; 0xc2 <writechannel+0x56>
  7a:	30 f0       	brcs	.+12     	; 0x88 <writechannel+0x1c>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	f1 f1       	breq	.+124    	; 0xfc <writechannel+0x90>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	09 f4       	brne	.+2      	; 0x86 <writechannel+0x1a>
  84:	58 c0       	rjmp	.+176    	; 0x136 <writechannel+0xca>
  86:	08 95       	ret
		case 0: 
		if(level==STD_HIGH)
  88:	61 30       	cpi	r22, 0x01	; 1
  8a:	69 f4       	brne	.+26     	; 0xa6 <writechannel+0x3a>
		SET_BIT(PORTA_REG,pos);
  8c:	4b b3       	in	r20, 0x1b	; 27
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	b9 01       	movw	r22, r18
  94:	02 c0       	rjmp	.+4      	; 0x9a <writechannel+0x2e>
  96:	66 0f       	add	r22, r22
  98:	77 1f       	adc	r23, r23
  9a:	9a 95       	dec	r25
  9c:	e2 f7       	brpl	.-8      	; 0x96 <writechannel+0x2a>
  9e:	cb 01       	movw	r24, r22
  a0:	84 2b       	or	r24, r20
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	08 95       	ret
		else 
		CLEAR_BIT(PORTA_REG,pos);
  a6:	4b b3       	in	r20, 0x1b	; 27
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	b9 01       	movw	r22, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <writechannel+0x48>
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	9a 95       	dec	r25
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <writechannel+0x44>
  b8:	cb 01       	movw	r24, r22
  ba:	80 95       	com	r24
  bc:	84 23       	and	r24, r20
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret
		break;
		
		case 1:
		if(level==STD_HIGH)
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	69 f4       	brne	.+26     	; 0xe0 <writechannel+0x74>
		SET_BIT(PORTB_REG,pos);
  c6:	48 b3       	in	r20, 0x18	; 24
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <writechannel+0x68>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <writechannel+0x64>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret
		else
		CLEAR_BIT(PORTB_REG,pos);
  e0:	48 b3       	in	r20, 0x18	; 24
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <writechannel+0x82>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	9a 95       	dec	r25
  f0:	e2 f7       	brpl	.-8      	; 0xea <writechannel+0x7e>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	08 95       	ret
		break;
		
		case 2:
		if(level==STD_HIGH)
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <writechannel+0xae>
		SET_BIT(PORTC_REG,pos);
 100:	45 b3       	in	r20, 0x15	; 21
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <writechannel+0xa2>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	9a 95       	dec	r25
 110:	e2 f7       	brpl	.-8      	; 0x10a <writechannel+0x9e>
 112:	cb 01       	movw	r24, r22
 114:	84 2b       	or	r24, r20
 116:	85 bb       	out	0x15, r24	; 21
 118:	08 95       	ret
		else
		CLEAR_BIT(PORTC_REG,pos);
 11a:	45 b3       	in	r20, 0x15	; 21
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	b9 01       	movw	r22, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <writechannel+0xbc>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	9a 95       	dec	r25
 12a:	e2 f7       	brpl	.-8      	; 0x124 <writechannel+0xb8>
 12c:	cb 01       	movw	r24, r22
 12e:	80 95       	com	r24
 130:	84 23       	and	r24, r20
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret
		break;
		
		case 3:
		if(level==STD_HIGH)
 136:	61 30       	cpi	r22, 0x01	; 1
 138:	69 f4       	brne	.+26     	; 0x154 <writechannel+0xe8>
		SET_BIT(PORTD_REG,pos);
 13a:	42 b3       	in	r20, 0x12	; 18
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <writechannel+0xdc>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	9a 95       	dec	r25
 14a:	e2 f7       	brpl	.-8      	; 0x144 <writechannel+0xd8>
 14c:	cb 01       	movw	r24, r22
 14e:	84 2b       	or	r24, r20
 150:	82 bb       	out	0x12, r24	; 18
 152:	08 95       	ret
		else
		CLEAR_BIT(PORTD_REG,pos);
 154:	42 b3       	in	r20, 0x12	; 18
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <writechannel+0xf6>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	9a 95       	dec	r25
 164:	e2 f7       	brpl	.-8      	; 0x15e <writechannel+0xf2>
 166:	cb 01       	movw	r24, r22
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	08 95       	ret

00000170 <main>:

#include "util/delay.h"
int main(void)
{
    /* Replace with your application code */
    DDRC|=(1<<2);
 170:	a2 9a       	sbi	0x14, 2	; 20
    while (1) 
    {
		writechannel(Dio_channel_C2,STD_HIGH);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	82 e1       	ldi	r24, 0x12	; 18
 176:	0e 94 36 00 	call	0x6c	; 0x6c <writechannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	83 ed       	ldi	r24, 0xD3	; 211
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x10>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x1a>
 18a:	00 00       	nop
		_delay_ms(1000);
		writechannel(Dio_channel_C2,STD_LOW);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	82 e1       	ldi	r24, 0x12	; 18
 190:	0e 94 36 00 	call	0x6c	; 0x6c <writechannel>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	83 ed       	ldi	r24, 0xD3	; 211
 198:	90 e3       	ldi	r25, 0x30	; 48
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x2a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x34>
 1a4:	00 00       	nop
 1a6:	e5 cf       	rjmp	.-54     	; 0x172 <main+0x2>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
